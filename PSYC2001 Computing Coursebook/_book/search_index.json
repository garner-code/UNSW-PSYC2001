[["introduction-to-r.html", "Chapter 1 Introduction to R 1.1 R and R Studio 1.2 Getting started 1.3 Getting to know R Studio 1.4 Scripts 1.5 Functions and arguments 1.6 Argument names 1.7 Tab auto-complete 1.8 Base R and packages 1.9 Installing and loading packages 1.10 Activity 3: Install the tidyverse 1.11 Activity 4: Load the tidyverse 1.12 Package updates 1.13 Package conflicts 1.14 Objects 1.15 Activity 5: Create some objects 1.16 Datatypes 1.17 Looking after the environment 1.18 You are Free!", " Chapter 1 Introduction to R Credit: This chapter heavily borrows from the work of Emily Nordmann at the University of Glasgow. Thanks, Emily! https://psyteachr.github.io/ads-v3/01-intro.html To perform data analysis in Psychology, one needs some powerful software to help you get data into shape, and to apply all the fancy statistical tests that you will learn about in this course. In this course, we will be using the programming language R and the software R Studio to do this. 1.1 R and R Studio For this course, you need two different bits of software, R and RStudio. R is a programming language that you will write code in and R Studio is an Integrated Development Environment (IDE) which makes working with R easier. Think of it as knowing English and using a plain text editor like NotePad to write a book versus using a word processor like Microsoft Word. You could do it, but it wouldn’t look as good and it would be much harder without things like spell-checking and formatting. In a similar way, you can use R without R Studio but we wouldn’t recommend it. The key thing to remember is that although you will do all of your work using R Studio for this course, you are actually using two pieces of software which means that from time-to-time, both of them may have separate updates. R is a free and open-source programming language that is widely used for statistical computing and data analysis. R Studio is a user-friendly interface that makes it easier to write and run R code, manage files, and visualize data. All of the UNSW School of Psychology computers have R and R Studio installed, however, we can only guarantee that the computers in the Level 2 psychology labs have the right set-up. Both R and RStudio are freely available so you may wish to install them on your own machine. There is a useful guide to installing them both here that you can use. Note that the PSYC2001 staff are unable to help you if you have specific technical issues setting up R and RStudio on your own machine. But the tutors can support you using R and RStudio on the School of Psychology computers in the computer labs. If you are having specific technical issues setting this up on your own machine, then you should submit an issue to UNSW IT Services. 1.2 Getting started You should have downloaded the files you need for this week’s computing lab tutorial from the course Moodle. Unzip the folder you have downloaded, move the folder somewhere sensible, e.g. from ‘Downloads’ to ‘Documents’, and open it up to take a peek at the contents inside. You should see something like the following - To-do: - add an image here at the end. Each week you will get a folder that looks somewhat like this. Each week, your first job is to download the folder, unzip it and move it to your sensible location, and then double click on the file that ends in ‘.Rproj’. This will open RStudio. Why should I open RStudio by clicking on the ‘.Rproj’ file? Indeed, this may seem like a strange request. .Rproj files automatically tells R where your files are located. This is called ‘setting the working directory’. What this means is that you won’t have to manually tell R where on the computer your needed files live (why will become clearer next week). This also means you get to save a lot of typing in future computing lab tutorials. 1.3 Getting to know R Studio R Studio has a console that you can try out code in (appearing as the bottom left window in Figure 1.1. If you have opened a script, then there is a script editor (top left, more on scripts shortly below). There is also a window showing functions and objects you have created in the “Environment” tab (top right window in the figure), and a window that shows files, plots, packages, and help documentation (bottom right). Figure 1.1: RStudio interface 1.3.1 Activity - using the console First let’s get used to the console where you can try out code. You can think of the console as a very fancy calculator. You can do some impressive calculations, but like a calculator, once you close it down, everything you did is lost. Click on the console (anywhere), and type the following: 2 + 2 Then press enter. You should see that R has calculated the answer for you. You can try other calculations, for example: (5 + 3 + 2) / 3 Important! If you are ever unsure about what a piece of code is doing, you should try running it (or bits of it) in the console, to see what answer each piece gives you. This is a great way to learn what code does and to debug your own code when it doesn’t work. 1.4 Scripts The console is great for trying out code, but it isn’t very good for writing code that you want to keep. For this, we use scripts. A script is simply a text file that contains code. You know you have an R script when the filename ends in ‘.R’. You can write code in a script and then run it in the console. This means that you can save your code and come back to it later. It also means that anyone, anywhere else in the world can reproduce your analysis by running your script. This is a key part of open science and reproducible research. 1.4.1 Activity - Getting to know scripts Open the script Introduction_to_R.R in R Studio. You can do this by clicking on the file in the Files tab (bottom right window) or by using File &gt; Open File… from the top menu. You can see at the top of the script there are some comments. Comments are lines of text that start with a # symbol. R ignores these lines when it runs the code, but they are useful for you to write notes to yourself about what the code is doing. You should always include comments in your code to explain what it is doing. This helps you remember what you did when you come back to it later, and it helps others understand your code if you share it with them. to-do - (put image of the script here) Try copying and pasting the code 2 + 2 from the console activity above into the script, below the comment that says # paste 2 + 2 here. You can do this by highlighting the code in the console, right-clicking and selecting copy, then clicking in the script where you want to paste it, right-clicking and selecting paste. Now try running the code in the script. You can do this by highlighting the code you want to run and then clicking the ‘Run’ button at the top of the script window (see Figure 1: Run button). You should see that the answer appears in the console. to-do: insert video Another way to do this is to highlight the code you want to run and then press Ctrl + Enter (or Cmd + Enter on a Mac). Try this now. You should see the results in the command window. to-do - put image of the result here Remember to save your script regularly by clicking the save icon (or using Ctrl + S or Cmd + S on a Mac). Save it, save it now! 1.5 Functions and arguments Functions in R allow you to perform tasks that would take a long time to write out by hand, by only using one term! Think of them as nifty tools that will save you lots of typing, again and again. A function normally takes a number of arguments (you might want to think as these as verbs that require a subject and an object). You can look up all the arguments that a function takes by using the help documentation by using the format ?function. Some arguments are required, and some are optional. Optional arguments will often use a default (normally specified in the help documentation) if you do not enter any value. Before, we calculated (5 + 3 + 2) / 3 in the console. You may have noticed that we add three numbers and then divide by the total number of numbers we added. You may have also noticed that this is the formula for calculating the mean (or average) of a set of numbers. Often in Psychology, we want to calculate the mean when we have many more than three numbers. This is where functions come in handy. Let’s look at the function mean(). 1.5.1 Activity - using a function Look up the help documentation for mean() by typing /usr/lib/R/library/base/help/mean in the console. You will see that there is a Description of the function, a guide to it’s Usage, and the Arguments you need to make the function work. In the Usage section, we see that mean() takes the following form: mean(x, trim = 0, na.rm = FALSE, ...) In the Arguments section, there are explanations for each of the arguments. x is the set of numbers that we want to calculate the mean for. Do not worry about trim and na.rm. For now, they can remain as mythical arguments in the interest of simplicity. Let’s use the mean function. Highlight the following line of code in your script and run it: # run the below line of code to see what answer you get mean(x=c(5, 3, 2)) The output in the console should match the answer you got when you calculated (5 + 3 + 2) / 3 by hand. This is but a simple example, but I am sure you can imagine the power of functions when you have many more numbers to work with. You’ll see in the code above that we have put the numbers together in some brackets preceeded by the letter c c(). This is another function that combines the numbers into something called a vector. You can think of a vector as a list of items of the same type (e.g., all numbers, or all words). We will learn more about vectors later in this course. Getting help on help It can be difficult to understand help documentation when you are first learning R. Know that you will not be the first. Many cries for help have been posted on stackoverflow.com. You can look there. Also, asking AI like ChatGPT can be useful. For example, you could ask “What does the mean() function in R do?” and it will give you a plain English explanation. However, be careful as AI can sometimes give incorrect information. Always double-check with the official help documentation or other reliable sources. And always always always triple check any code you get AI to help you write. 1.6 Argument names In the above examples, we have written out the argument names in our code (e.g., n, mean, sd), however, this is not strictly necessary. The following two lines of code would both produce the same result (although each time you run rnorm() it will produce a slightly different set of numbers, because it’s random, but they would still have the same mean and SD): rnorm(n = 6, mean = 3, sd = 1) rnorm(6, 3, 1) Importantly, if you do not write out the argument names, R will use the default order of arguments, that is for rnorm it will assume that the first number you enter is n. the second number is mean and the third number is sd. If you write out the argument names then you can write the arguments in whatever order you like: rnorm(sd = 1, n = 6, mean = 3) When you are first learning R, you may find it useful to write out the argument names as it can help you remember and understand what each part of the function is doing. However, as your skills progress you may find it quicker to omit the argument names and you will also see examples of code online that do not use argument names so it is important to be able to understand which argument each bit of code is referring to (or look up the help documentation to check). In this course, we will always write out the argument names the first time we use each function, however, in subsequent uses they may be omitted. 1.7 Tab auto-complete One very useful feature of R Studio is the tab auto-complete for functions (see Figure 2: Tab auto-complete). If you write the name of the function and then press the tab key, R Studio will show you the arguments that function takes along with a brief description. If you press enter on the argument name it will fill in the name for you, just like auto-complete on your phone. This is incredibly useful when you are first learning R and you should remember to use this feature frequently. To-do: - change image so that the autocomplete is done in an R script. Figure 1.2: Tab auto-complete 1.8 Base R and packages When you install R you will have access to a range of functions including options for data wrangling and statistical analysis. The functions that are included in the default installation are typically referred to as Base R and there is a useful cheat sheet that shows many Base R functions here. However, the power of R is that it is extendable and open source - put simply, if a function doesn’t exist or doesn’t work very well, anyone can create a new package that contains data and code to allow you to perform new tasks. You may find it useful to think of Base R as the default apps that come on your phone and packages as additional apps that you need to download separately. 1.9 Installing and loading packages Info: The UNSW psychology computers will already have all of the packages you need for this course so you only need to install packages if you are using your own machine. 1.10 Activity 3: Install the tidyverse In order to use a package, you must first install it. The following code installs the package tidyverse, a package we will use very frequently in this course. If you are interested in learning more about tidyverse and how incredibly useful it is in R, please consider reading R for Data Science. It’s also a great reference whenever you need help using functions from the tidyverse. If you want to learn more coding skills in R, we highly recommend working your way through this book. If you are working on your own computer, use the below code to install the tidyverse. Do not do this if you are working on a University machine. install.packages(&quot;tidyverse&quot;) You only need to install a package once, however, each time you start R you need to load the packages you want to use, in a similar way that you need to install an app on your phone once, but you need to open it every time you want to use it. To load packages we use the function library(). Typically you would start any analysis script by loading all of the packages you need, but we will come back to that in the labs. 1.11 Activity 4: Load the tidyverse Run the below code to load the tidyverse. You can do this regardless of whether you are using your own computer or a University machine. library(tidyverse) You will get what looks like an error message - it’s not. It’s just R telling you what it’s done. Now that we’ve loaded the tidyverse package we can use any of the functions it contains but remember, you need to run the library() function every time you start R. To-do: - remove package updates and conflicts 1.12 Package updates In addition to updates to R and R Studio, the creators of packages also sometimes update their code. This can be to add functions to a package, or it can be to fix errors. One thing to avoid is unintentionally updating an installed package. When you run install.packages() it will always install the latest version of the package and it will overwrite any older versions you may have installed. Sometimes this isn’t a problem, however, sometimes you will find that the update means your code no longer works as the package has changed substantially. It is possible to revert back to an older version of a package but try to avoid this anyway. Warning: To avoid accidentally overwriting a package with a later version, you should never include install.packages() in your analysis scripts in case you, or someone else runs the code by mistake. Remember, the UNSW psychology computers will already have all of the packages you need for this course so you only need to install packages if you are using your own machine. 1.13 Package conflicts There are thousands of different R packages with even more functions. Unfortunately, sometimes different packages have the same function names. For example, the packages dplyr and MASS both have a function named select(). If you load both of these packages, R will produce a warning telling you that there is a conflict. library(dplyr) library(MASS) ## ## Attaching package: &#39;MASS&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## select In this case, R is telling you that the function select() in the dplyr package is being hidden (or ‘masked’) by another function with the same name. If you were to try and use select(), R would use the function from the package that was loaded most recently - in this case it would use the function from MASS. If you want to specify which package you want to use for a particular function you can use code in the format package::function, for example: dplyr::select() MASS::select() Note that this is for your own information, so that you aren’t alarmed when you see such messages in your great future of data analysis. You won’t have to worry about package conflicts during this course. 1.14 Objects A large part of your coding for data analysis will involve creating and manipulating objects. Objects contain stuff. That stuff can be numbers, words, or the result of operations and analyses.You assign content to an object using &lt;-. 1.15 Activity 5: Create some objects Copy and paste the following code into the console, change the code so that it uses your own name and age and run it. You should see that name, age, today, new_year, and data appear in the environment pane. name &lt;- &quot;emily&quot; age &lt;- 15 + 18 today &lt;-Sys.Date() new_year &lt;- as.Date(&quot;2020-01-01&quot;) data &lt;- rnorm(n = 10, mean = 15, sd = 3) Figure 1.3: Objects in the environment Note that in these examples, name,age, and new_year would always contain the values emily, 33, and the date of New Year’s Day 2020, however, today will draw the date from the operating system and data will be a randomly generated set of data so the values of these objects will not be static. Warning: You may also see objects referred to as ‘variables’. There is a difference between the two in programming terms, however, they are used synonymously very frequently. As a side note, if you ever have to teach programming and statistics, don’t use your age as an example because everytime you have to update your teaching materials you get a reminder of the fragility of existence and your advancing age. Importantly, objects can be involved in calculations and can interact with each other. For example: age + 10 ## [1] 43 new_year - today ## Time difference of -2086 days mean(data) ## [1] 17.13183 Finally, you can store the result of these operations in a new object: decade &lt;- age + 10 To-do: - add an activity where the student creates the object in the script. - also where they make a new object from old objects and add it to the script. Tip: You may find it helpful to read &lt;- as contains, e.g., name contains the text emily. 1.16 Datatypes You will constantly be creating objects throughout this course and you will learn more about them and how they behave as we go along, however, for now it is enough to understand that they are a way of saving values, that these values can be numbers, text, or the result of operations, and that they can be used in further operations to create new variables. For now, we can have a look at the datatypes of our objects using the function typeof. #These are both doubles (i.e numbers!) typeof(age) ## [1] &quot;double&quot; typeof(new_year) ## [1] &quot;double&quot; #This is a chr (i.e contains letters!) typeof(name) ## [1] &quot;character&quot; Info: There are 5 main datatypes: double, integer, complex, logical and character. For historic reasons, double is also called numeric. We will learn about and use many of these different datatypes in this course. We will learn about using these datatypes (as well as some of the others) throughout this course, so don’t fret if you don’t understand it yet ! 1.17 Looking after the environment If you’ve been writing a lot of code you may find that the environment pane (or workspace) has become cluttered with many objects. This can make it difficult to figure out which object you need and therefore you run the risk of using the wrong data frame. If you’re working on a new dataset, or if you’ve tried lots of different code before getting the final version, it is good practice to remember to clear the environment to avoid using the wrong object. You can do this in several way. To remove individual objects, you can type rm(object_name) in the console. Try this now to remove one of the objects you created in the previous section. To clear all objects from the environment run rm(list = ls()) in the console. To clear all objects from the environment you can also click the broom icon in the environment pane. Figure 1.4: Clearing the workspace To-do: - Now add an activity where they clear the environment and run the script from start to finish, using the Run button. - then they save the script. 1.18 You are Free! Congratulations you have survived the first tutorial for this course. We look forward to seeing you next week for more coding fun. To-do: - check repo for appropriate image or ask Bart Figure 1.5: Students reaction to finishing this "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
